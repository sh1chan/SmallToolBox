# TODO (ames0k0)
# - Remove the `network_mode`
# - Set the images version
# - Change the Services and Containers name
# - Add Volumes

services:

  broker:
    image: apache/kafka:latest
    container_name: broker
    network_mode: host
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "stb_events"
      AUTO_CREATE_TOPICS: "true"
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    network_mode: host
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    hostname: redis
    restart: always
    network_mode: host
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0

  minio:
    image: quay.io/minio/minio:latest
    network_mode: host
    restart: unless-stopped
    container_name: minio
    command: ["minio", "server", "data"]

  stb__core:
    build:
      context: stb__core
    image: stb__core:v0.1.0
    container_name: stb__core

  stb__tg_bot:
    build:
      context: .
    image: stb__tg_bot:v0.1.0
    container_name: stb__tg_bot
    network_mode: host
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      broker:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      stb__core:
        condition: service_completed_successfully

  stb__tg_messages:
    build:
      context: stb__tg_messages
    image: stb__tg_messages:v0.1.0
    container_name: stb__tg_messages
    network_mode: host
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      stb__core:
        condition: service_completed_successfully

  stb__stats_generator:
    build:
      context: stb__stats_generator
    image: stb__stats_generator:v0.1.0
    container_name: stb__stats_generator
    network_mode: host
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_started
      stb__tg_messages:
        condition: service_started

  stb__events_analyzer:
    build:
      context: stb__events_analyzer
    image: stb__events_analyzer:v0.1.0
    container_name: stb__events_analyzer
    network_mode: host
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      broker:
        condition: service_healthy
